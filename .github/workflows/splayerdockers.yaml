name: SPlayer Runtime-Build Docker Image

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 获取上游 SPlayer 最新 Release 版本号
        id: get_release
        run: |
          tag=$(curl -s https://api.github.com/repos/IamFurina/SPlayer/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV

      - name: 克隆 SPlayer 源码
        run: |
          git clone --depth=1 https://github.com/IamFurina/SPlayer.git
          # 验证必要文件存在
          if [ ! -f SPlayer/package.json ] || [ ! -f SPlayer/pnpm-lock.yaml ]; then
            echo "错误：package.json 或 pnpm-lock.yaml 文件不存在！"
            exit 1
          fi

      - name: 准备 Docker 构建文件
        working-directory: ./SPlayer
        run: |
          # 创建 .dockerignore
          cat <<'EOF' > .dockerignore
          .git
          .github
          .vscode
          .env.local
          Dockerfile
          docker-compose.yml
          *.md
          *.log
          EOF
          
          # 创建 Dockerfile (保留运行时编译)
          cat <<'EOF' > Dockerfile
          # 基础镜像包含构建工具
          FROM node:18-alpine
          
          # 安装系统依赖
          RUN apk add --no-cache bash nginx python3 make g++
          
          # 全局安装 pnpm
          RUN npm install -g pnpm
          
          # 设置工作目录
          WORKDIR /app
          
          # 复制项目文件（包括package.json和pnpm-lock.yaml）
          COPY package.json pnpm-lock.yaml ./
          
          # 预安装依赖（利用Docker缓存层）
          RUN pnpm install --frozen-lockfile --prod=false
          
          # 复制剩余项目文件
          COPY . .
          
          # 复制 nginx 配置
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          
          # 复制入口脚本
          COPY entrypoint.sh /entrypoint.sh
          RUN chmod +x /entrypoint.sh
          
          # 创建非root用户
          RUN adduser -D -u 1001 staticuser && \
              chown -R staticuser:staticuser /var/cache/nginx && \
              chown -R staticuser:staticuser /app
          
          # 切换到非root用户
          USER staticuser
          
          # 暴露应用端口
          EXPOSE 7899
          
          # 设置入口点
          ENTRYPOINT ["/entrypoint.sh"]
          EOF
          
          # 创建 entrypoint.sh (支持挂载 .env)
          cat <<'EOF' > entrypoint.sh
          #!/bin/bash
          set -e
          
          echo "[ENTRYPOINT] 启动容器时间: $(date)"
          
          # 检查是否存在挂载的 .env 文件
          if [ -f "/app/.env" ]; then
            echo "[ENTRYPOINT] 检测到挂载的 .env 文件，使用外部配置"
            # 确保文件权限正确
            chmod 644 /app/.env 2>/dev/null || true
            # 创建符号链接确保构建使用正确的.env
            ln -sf /app/.env .env
          else
            echo "[ENTRYPOINT] 未检测到挂载的 .env 文件，使用内置配置"
            if [ ! -f .env ]; then
              echo "[ENTRYPOINT] 复制 .env.example 为 .env"
              cp .env.example .env
            fi
          fi
          
          # 显示环境配置（前5行，避免泄露敏感信息）
          echo "[ENTRYPOINT] 当前环境配置预览:"
          head -n 5 .env | sed 's/^/  /'
          echo "..."
          
          # 确保依赖文件存在
          if [ ! -f "package.json" ]; then
            echo "[ERROR] package.json 文件不存在！"
            exit 1
          fi
          
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "[ERROR] pnpm-lock.yaml 文件不存在！"
            exit 1
          fi
          
          # 安装依赖（如果有更新）
          echo "[ENTRYPOINT] 检查依赖更新..."
          pnpm install --frozen-lockfile
          
          # 执行构建
          echo "[ENTRYPOINT] 开始构建应用..."
          pnpm build
          
          # 复制构建产物到 nginx 目录
          echo "[ENTRYPOINT] 复制构建产物..."
          cp -r out/renderer/* /usr/share/nginx/html/
          
          # 启动 nginx
          echo "[ENTRYPOINT] 启动 nginx 服务..."
          exec nginx -g "daemon off;"
          EOF
          
          # 设置 entrypoint.sh 权限
          chmod +x entrypoint.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送 Runtime 镜像
        uses: docker/build-push-action@v5
        with:
          context: ./SPlayer
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            wudiming/prosp:latest
            wudiming/prosp:${{ env.RELEASE_TAG }}

name: SPlayer Runtime-Build Docker Image

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 获取上游 SPlayer 最新 Release 版本号
        id: get_release
        run: |
          tag=$(curl -s https://api.github.com/repos/IamFurina/SPlayer/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV

      - name: 克隆 SPlayer 源码
        run: |
          git clone --depth=1 https://github.com/IamFurina/SPlayer.git
          if [ ! -f SPlayer/package.json ] || [ ! -f SPlayer/pnpm-lock.yaml ]; then
            echo "错误：package.json 或 pnpm-lock.yaml 文件不存在！"
            exit 1
          fi

      - name: 准备 Docker 构建文件
        working-directory: ./SPlayer
        run: |
          # .dockerignore
          cat <<'EOF' > .dockerignore
          .git
          .github
          .vscode
          .env.local
          Dockerfile
          docker-compose.yml
          *.md
          *.log
          *.zip
          release/
          docs/
          EOF
          
          # Dockerfile
          cat <<'EOF' > Dockerfile
          FROM node:18-alpine

          RUN apk add --no-cache bash nginx python3 make g++ \
            && npm install -g pnpm

          WORKDIR /app

          COPY package.json pnpm-lock.yaml ./
          RUN pnpm install --frozen-lockfile --prod=false

          COPY . .

          COPY nginx.conf /etc/nginx/conf.d/default.conf
          COPY entrypoint.sh /entrypoint.sh
          RUN chmod +x /entrypoint.sh

          EXPOSE 7899

          ENTRYPOINT ["/entrypoint.sh"]
          EOF

          # entrypoint.sh
          cat <<'EOF' > entrypoint.sh
          #!/bin/bash
          set -e

          echo "[ENTRYPOINT] 启动容器时间: $(date)"

          if [ -f "/app/.env" ]; then
            echo "[ENTRYPOINT] 检测到挂载的 .env 文件，使用外部配置"
            cp /app/.env .env
          else
            echo "[ENTRYPOINT] 未检测到挂载的 .env 文件，使用内置配置"
            if [ ! -f .env ]; then
              echo "[ENTRYPOINT] 复制 .env.example 为 .env"
              cp .env.example .env
            fi
          fi

          echo "[ENTRYPOINT] 当前环境配置预览:"
          head -n 5 .env | sed 's/^/  /'
          echo "..."

          if [ ! -f "package.json" ]; then
            echo "[ERROR] package.json 文件不存在！"
            exit 1
          fi

          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "[ERROR] pnpm-lock.yaml 文件不存在！"
            exit 1
          fi

          echo "[ENTRYPOINT] 检查依赖更新..."
          pnpm install --frozen-lockfile

          echo "[ENTRYPOINT] 开始构建应用..."
          pnpm build

          echo "[ENTRYPOINT] 复制构建产物..."
          if [ -d "out/renderer" ]; then
            cp -r out/renderer/* /usr/share/nginx/html/
          else
            echo "[ERROR] 构建目录 out/renderer 不存在，可能构建失败"
            exit 1
          fi

          echo "[ENTRYPOINT] 启动 nginx 服务..."
          exec nginx -g "daemon off;"
          EOF

          chmod +x entrypoint.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送 Runtime 镜像
        uses: docker/build-push-action@v5
        with:
          context: ./SPlayer
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            wudiming/prosp:latest
            wudiming/prosp:${{ env.RELEASE_TAG }}
